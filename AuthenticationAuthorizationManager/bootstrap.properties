#################################################################
## TODO: Below are the configurations need to be setup by the user
################################################################

logging.level.eu.h2020.symbiote = DEBUG
# AAM settings
# username and password of the AAM module (of your choice) -- master password used to manage your AAM (e.g. register new users), not your credentials in the Core
aam.deployment.owner.username=<FILL ME: owner username>
aam.deployment.owner.password=<FILL ME: owner password>

# name of the JavaKeyStore file you created using the ServiceAAMKeystoreFactory that you could put next to the AAM jar
aam.security.KEY_STORE_NAME=core.p12

#was keystore.jks.p2

# symbiote keystore password
aam.security.KEY_STORE_PASSWORD=<FILL ME: symbiote keystore password>


# symbiote certificate private key password
aam.security.PV_KEY_PASSWORD=<FILL ME: symbiote certificate private key password>


# name of the AAM certificate entry
aam.security.CERTIFICATE_ALIAS=paam
#################################################################
## END OF TODO
#################################################################


# REQUIRED SETTINGS:
#in case of standalone AAM, cloud config should not be enabled
spring.application.name=AuthenticationAuthorizationManager
logging.file=logs/AuthenticationAuthorizationManager.log
spring.cloud.config.failFast=true
spring.cloud.config.retry.maxAttempts=1000
spring.cloud.config.uri=http://symbiote-coreconfig:8888
server.ssl.enabled=false

# FOLLOWING SETTINGS CAN BE FOUND IN CoreConfigProperties OR CloudConfigProperties DEPENDING ON KIND OF AAM (CORE, SERVICE) AND THEY ARE DOWNLOADED AUTOMATICALLY.
# THEY SHOULD BE USED ONLY IN CASE OF STANDALONE AAMS. ALL THE FIELDS MARKED AS REQUIRED SHOULD BE UNCOMMENTED AND FILLED.
# OPTIONAL
# (DEFAULT: true)
eureka.client.enabled=true
spring.zipkin.enabled=false

# REQUIRED BY ALL AMMS:

# Cache settings. If validated token is in cache, component certificate or available AAMs were aquired recently, value from cache is returned to avoid communication with another AAM. In case of missing, default values are used.
# time (in milliseconds) for which valid token should be cached (DEFAULT: 60000)
aam.cache.validToken.expireMillis=-1
#aam.cache.validToken.expireMillis=60000
# size of validToken cache. If size set to -1, validToken cache has no limit. (DEFAULT: 1000)
aam.cache.validToken.size=1000
# time (in seconds) for which componentCertificate should be cached (DEFAULT: 60)
aam.cache.componentCertificate.expireSeconds=60
# time (in seconds) for which availableAAMs should be cached (DEFAULT: 60)
aam.cache.availableAAMs.expireSeconds=60
#JWT validity time in milliseconds - how long the tokens issued to your users (apps) are valid... think maybe of an hour, day, week?
aam.deployment.token.validityMillis=6000000
# allowing offline validation of foreign tokens by signature trust-chain only. Useful when foreign tokens are expected to be used along with no internet access
aam.deployment.validation.allow-offline=false

# path of the JavaKeyStore file you created using the ServiceAAMKeystoreFactory that you could put next to the AAM jar
# was aam.security.KEY_STORE_FILE_NAME=file:///#{systemProperties['user.dir']}/${aam.security.KEY_STORE_NAME}
aam.security.KEY_STORE_FILE_NAME=  file:///home/${aam.security.KEY_STORE_NAME}
# name of the AAM certificate entry
aam.security.ROOT_CA_CERTIFICATE_ALIAS=${aam.security.CERTIFICATE_ALIAS}
